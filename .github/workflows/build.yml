name: Build my gitbook and deploy to gh-pages

on:
  workflow_dispatch:
  push:
    branches:
      - master

jobs:
  build-and-deploy:
    name: Build and deploy
    runs-on: ubuntu-latest
    env:
      MY_SECRET   : ${{secrets.GH_ACCESS_TOKEN}}
      USER_NAME   : Alex
      USER_EMAIL  : aliceric27@gmail.com
      BOOK_DIR    : book_sources

    steps:
    - name: Checkout 🛎️
      uses: actions/checkout@v2.3.1
      
    - name: Setup Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '10.21.0'
        
    - name: Install GitBook CLI
      run: |
        npm install -g gitbook-cli
        # 修復某些 npm 命令問題
        npm config set legacy-peer-deps true
        
    - name: Create missing README.md files
      run: |
        cd $BOOK_DIR
        # 遍歷所有目錄，確保有 README.md 文件
        find . -type d -not -path "*/\.*" | while read -r dir; do
          if [ "$dir" != "." ] && [ ! -f "$dir/README.md" ]; then
            dirname=$(basename "$dir")
            echo "# $dirname" > "$dir/README.md"
            echo "創建了缺失的 README.md: $dir/README.md"
          fi
        done
        
    - name: Generate SUMMARY.md
      run: |
        cd $BOOK_DIR
        # 自動生成 SUMMARY.md
        echo "# 目錄" > SUMMARY.md
        echo "" >> SUMMARY.md
        
        # 添加一級目錄
        for dir in */; do
          if [ -d "$dir" ] && [ "$dir" != "images/" ]; then
            dirname=${dir%/}
            echo "* [$dirname]($dirname/README.md)" >> SUMMARY.md
            
            # 添加二級目錄
            if [ -d "$dirname" ]; then
              for subdir in "$dirname"/*/; do
                if [ -d "$subdir" ]; then
                  subdirname=$(basename "${subdir%/}")
                  echo "  * [$subdirname]($dirname/$subdirname/README.md)" >> SUMMARY.md
                  
                  # 添加三級目錄
                  if [ -d "$subdir" ]; then
                    for subsubdir in "$subdir"/*/; do
                      if [ -d "$subsubdir" ]; then
                        subsubdirname=$(basename "${subsubdir%/}")
                        echo "    * [$subsubdirname]($dirname/$subdirname/$subsubdirname/README.md)" >> SUMMARY.md
                      fi
                    done
                  fi
                fi
              done
            fi
          fi
        done
        
        # 添加單獨的 md 文件
        for file in *.md; do
          if [ "$file" != "SUMMARY.md" ] && [ "$file" != "README.md" ]; then
            title=$(head -n 1 "$file" | sed 's/^# //')
            echo "* [$title]($file)" >> SUMMARY.md
          fi
        done
        
        cat SUMMARY.md
        
    - name: Build GitBook manually
      run: |
        cd $BOOK_DIR
        
        # 創建 package.json 以便更好地管理依賴
        if [ ! -f "package.json" ]; then
          echo '{
            "name": "gitbook-msu",
            "version": "1.0.0",
            "description": "MSU GitBook",
            "dependencies": {
              "gitbook-plugin-edit-link": "^2.0.2",
              "gitbook-plugin-copy-code-button": "^0.0.2",
              "gitbook-plugin-theme-comscore": "^0.0.3",
              "gitbook-plugin-ga": "^1.0.1",
              "gitbook-plugin-summary": "^1.1.0"
            }
          }' > package.json
        fi
        
        # 安裝依賴
        npm install --no-optional
        
        # 初始化 GitBook
        gitbook init
        
        # 使用 gitbook-cli 預先安裝依賴庫
        mkdir -p node_modules
        
        # 構建 GitBook，忽略插件安裝錯誤
        gitbook build . || true
        
        # 檢查構建結果
        if [ -d "_book" ]; then
          echo "GitBook 構建成功!"
          ls -la _book/
        else
          echo "GitBook 構建失敗!"
          
          # 嘗試最後的手動構建
          cp -r . /tmp/gitbook_build
          cd /tmp/gitbook_build
          rm -rf node_modules
          gitbook init
          gitbook build
          if [ -d "_book" ]; then
            cp -r _book $GITHUB_WORKSPACE/$BOOK_DIR/
            echo "手動構建成功!"
          else
            exit 1
          fi
        fi
        
    - name: Deploy to GitHub Pages
      run: |
        cd $BOOK_DIR/_book
        git init
        git config user.name "$USER_NAME"
        git config user.email "$USER_EMAIL"
        git add .
        git commit -m "Deploy to GitHub Pages"
        git remote add origin https://$USER_NAME:$MY_SECRET@github.com/$GITHUB_REPOSITORY.git
        git push -f origin master:gh-pages